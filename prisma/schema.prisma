// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  chats Chat[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Chat {
  id         String   @id @default(uuid())
  provider   String
  model      String
  modelTitle String
  baseUrl    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  messages Message[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  file      File?
  token     Int?
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())

  chat   Chat?   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String?
}

model File {
  id        String   @id @default(uuid())
  name      String
  type      String
  size      Int
  url       String
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageRole {
  USER
  AI
}
